import {clpp} from "./cl.core.js";let g={};const _ = clpp._;var f=function(window){'use strict';var FU=class extends _.Au{constructor(){super();this.a=this.m=null;this.l=this.f=this.j=!1;this.o=new _.bt(()=>{this.m.play().catch(()=>{})});this.h=new _.ts}onPlayerCreated(a){this.m=a;this.a=a.getSurface().getMedia()}onContentWillLoad(){this.a&&(this.h.on(this.a,"webkitplaybacktargetavailabilitychanged",this.w.bind(this)),this.h.on(this.a,"webkitcurrentplaybacktargetiswirelesschanged",this.A.bind(this)))}onPlayerWillRelease(){this.o.stop();this.h.release()}id(){return"airplay"}w(a){switch(a.availability){case "available":this.f=
!0;break;case "not-available":this.f=!1}this.m.trigger(new _.E(_.xc,{canCast:this.f}))}A(){const a=(this.j=this.a.webkitCurrentPlaybackTargetIsWireless)?_.wc:_.vc;if(this.l||!this.m.isPaused()||this.m.getState()===_.Zn)this.l?this.m.play().catch(()=>{}):this.o.ha(.01);this.m.trigger(new _.E(a))}ub(){return this.j}Ud(){return this.f}th(){this.f&&(this.l=!this.m.isPaused(),this.a.webkitShowPlaybackTargetPicker())}};_.z("clpp.airplay.AirPlayPlugin",FU);FU.prototype.showCastMenu=FU.prototype.th;
FU.prototype.canCast=FU.prototype.Ud;FU.prototype.isCasting=FU.prototype.ub;FU.Id="airplay";_.dp(new class{create(){return new FU}});};f.call(g, window);